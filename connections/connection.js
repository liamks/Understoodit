// Generated by CoffeeScript 1.3.1
(function() {
  var Connection, crypto, redis, tokenB, tokenBTeacher, whiteList;

  redis = require('redis');

  crypto = require('crypto');

  whiteList = require('../config/actions-white-list');

  tokenB = 'kwtpIq1N8/Sp6cYxEvpoQ1sG09FtodXjUb9aW+ahoM0=';

  tokenBTeacher = 'ml5qmczfz6yovJJXr0L0BEO3Av7jMfanrggteFuwMxo=';

  Connection = (function() {

    Connection.name = 'Connection';

    function Connection(socket) {
      var _this = this;
      this.socket = socket;
      this.pub = redis.createClient();
      this.sub = redis.createClient();
      this.pubConnected = false;
      this.subConnected = false;
      this.initCalled = false;
      this.sub.on('connect', function(b) {
        if (_this.initCalled && _this.pubConnected) {
          _this.initialize();
        }
        return _this.subConnected = true;
      });
      this.pub.on('connect', function(b) {
        if (_this.initCalled && _this.subConnected) {
          _this.initialize();
        }
        return _this.pubConnected = true;
      });
      this.addEventHandlers();
    }

    Connection.prototype.tokensAreValid = function() {
      var c, tokB;
      if (this.studentID != null) {
        tokB = tokenB;
      } else {
        tokB = tokenBTeacher;
      }
      c = crypto.createHash('sha256').update(this.tokenA + tokB).digest('base64');
      return c === this.tokenC;
    };

    Connection.prototype.initialize = function() {
      var connectMsg,
        _this = this;
      this.teacherID = this.data.teacherID;
      this.studentID = this.data.studentID;
      this.tokenA = this.data.tokenA;
      this.tokenC = this.data.tokenC;

      if (!((this.teacherID != null) && (this.tokenA != null) && (this.tokenC != null))) {
        this.socket.emit('initialized-fail', true);
        return this.socket.disconnect();
      }

      this.authorized = this.tokensAreValid();

      if (!this.authorized) {
        this.socket.emit('initialized-fail', true);
        return this.socket.disconnect();
      }

      this.teacherChannel = "teachers.n1." + this.teacherID;

      if (this.studentID != null) {
        /* Is a student, subscribe to student channels */
        this.sub.subscribe(this.studentID);
        this.sub.subscribe("" + this.teacherID + ".students");
      } else {
        this.sub.subscribe(this.teacherID);
      }

      this.sub.on('message', function(channel, msg) {
        var message;
        message = JSON.parse(msg);
        message.date = Date.now();
        return _this.socket.emit('message', message);
      });

      connectMsg = this.data;
      connectMsg.action = "connect";
      connectMsg.date = Date.now();
      connectMsg = JSON.stringify(connectMsg);
      this.pub.publish(this.teacherChannel, connectMsg);
      return this.socket.emit('initialized', true);
    };

    Connection.prototype.init = function(data) {
      this.data = data;
      if (this.subConnected && this.pubConnected) {
        this.initialize();
      }
      return this.initCalled = true;
    };

    Connection.prototype.addEventHandlers = function() {
      var _this = this;
      this.socket.on('init', function(data) {
        return _this.init(data);
      });
      return this.socket.on('message', function(data) {
        var permission;
        if (data.action && (whiteList[data.action] != null) && _this.authorized) {
          permission = false;
          if (whiteList[data.action] === '0') {
            permission = !(_this.studentID != null);
          } else if (whiteList[data.action] === '1') {
            permission = _this.studentID != null;
          } else if (whiteList[data.action] === '2') {
            permission = true;
          }
          if (permission) {
            data.date = Date.now();
            data = JSON.stringify(data);
            return _this.pub.publish(_this.teacherChannel, data);
          }
        }
      });
    };

    Connection.prototype.disconnect = function() {
      var disconnectMsg;
      disconnectMsg = {
        action: 'disconnect',
        teacherID: this.teacherID,
        date: Date.now()
      };
      if (this.studentID != null) {
        disconnectMsg.studentID = this.studentID;
      }
      disconnectMsg = JSON.stringify(disconnectMsg);
      if (this.teacherID != null) {
        this.pub.publish(this.teacherChannel, disconnectMsg);
      }
      this.pub.quit();
      this.sub.unsubscribe();
      return this.sub.quit();
    };

    return Connection;

  })();

  exports.connection = Connection;

}).call(this);
